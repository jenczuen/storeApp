// Generated by CoffeeScript 1.3.3
(function() {
  var DatabaseApi,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  DatabaseApi = (function() {

    function DatabaseApi() {
      this.flush = __bind(this.flush, this);

      this.sendSearchRequest = __bind(this.sendSearchRequest, this);

      this.confirmOrder = __bind(this.confirmOrder, this);

      this.getSessionId = __bind(this.getSessionId, this);

      this.getBuyerData = __bind(this.getBuyerData, this);

      this.sendBuyerData = __bind(this.sendBuyerData, this);

      this.getCart = __bind(this.getCart, this);

      this.sendCart = __bind(this.sendCart, this);

      this.getCategories = __bind(this.getCategories, this);

      this.getProducts = __bind(this.getProducts, this);
      this.json_data = null;
      this.products = null;
      this.categories = null;
      this.buyerData = null;
      this.cart = null;
      this.searchResult = null;
    }

    DatabaseApi.prototype.saveJsonData = function(json_data) {
      return this.json_data = json_data;
    };

    DatabaseApi.prototype.getProducts = function() {
      var item, _i, _len, _ref,
        _this = this;
      $.ajax({
        url: '/spa/getProducts.json',
        async: false,
        dataType: 'json',
        success: function(data, status) {
          return _this.saveJsonData(data);
        }
      });
      this.products = [];
      _ref = this.json_data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        this.products.add(new Product(item.author, item.title, item.price, item.description, item.category_id, item.id));
      }
      return this.products;
    };

    DatabaseApi.prototype.getCategories = function() {
      var item, _i, _len, _ref,
        _this = this;
      $.ajax({
        url: '/spa/getCategories.json',
        async: false,
        dataType: 'json',
        success: function(data, status) {
          return _this.saveJsonData(data);
        }
      });
      this.categories = [];
      _ref = this.json_data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        this.categories.add(new Category(item.name, item.id));
      }
      return this.categories;
    };

    DatabaseApi.prototype.sendCart = function(cart) {
      var item, result, _i, _len;
      result = {
        items: []
      };
      for (_i = 0, _len = cart.length; _i < _len; _i++) {
        item = cart[_i];
        result.items.push({
          product_id: item.product.id,
          quantity: item.quantity
        });
      }
      return $.ajax({
        type: "POST",
        url: '/spa/sendCart.json',
        async: false,
        dataType: 'json',
        data: result
      });
    };

    DatabaseApi.prototype.getCart = function() {
      var item, product, _i, _len, _ref,
        _this = this;
      $.ajax({
        url: '/spa/getCart.json',
        async: false,
        dataType: 'json',
        success: function(data, status) {
          return _this.saveJsonData(data);
        }
      });
      this.cart = [];
      product = null;
      if (this.json_data !== []) {
        _ref = this.json_data;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          product = new Product(item.product.author, item.product.title, item.product.price, item.product.description, item.product.category_id, item.product.id);
          this.cart.add(new OrderItem(product, item.quantity));
        }
      } else {
        this.cart = null;
      }
      return this.cart;
    };

    DatabaseApi.prototype.sendBuyerData = function(buyerData) {
      return $.ajax({
        type: "POST",
        url: '/spa/sendCurrentBuyer.json',
        async: false,
        dataType: 'json',
        data: {
          "firstName": buyerData.firstName,
          "secondName": buyerData.secondName,
          "street": buyerData.street,
          "city": buyerData.city
        }
      });
    };

    DatabaseApi.prototype.getBuyerData = function() {
      var _this = this;
      $.ajax({
        url: '/spa/getCurrentBuyer.json',
        async: false,
        dataType: 'json',
        success: function(data, status) {
          return _this.saveJsonData(data);
        }
      });
      if (this.json_data.hasAccount === true) {
        this.buyerData = new BuyerData(this.json_data.firstName, this.json_data.secondName, this.json_data.street, this.json_data.city);
      } else {
        this.buyerData = null;
      }
      return this.buyerData;
    };

    DatabaseApi.prototype.getSessionId = function() {
      var _this = this;
      $.ajax({
        url: '/spa/getSessionId.json',
        async: false,
        dataType: 'json',
        success: function(data, status) {
          return _this.saveJsonData(data);
        }
      });
      return this.sessionId = this.json_data.id;
    };

    DatabaseApi.prototype.confirmOrder = function() {
      this.cart = [];
      return $.ajax({
        type: "POST",
        url: '/spa/confirmOrder.json',
        async: false,
        dataType: 'json',
        data: {
          "confirm": "order"
        }
      });
    };

    DatabaseApi.prototype.sendSearchRequest = function(request) {
      var item, _i, _len, _ref,
        _this = this;
      $.ajax({
        type: "POST",
        url: '/spa/searchProducts.json',
        async: false,
        dataType: 'json',
        data: {
          q: request
        },
        success: function(data, status) {
          return _this.saveJsonData(data);
        }
      });
      this.searchResult = [];
      _ref = this.json_data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        this.searchResult.add(new Product(item.author, item.title, item.price, item.description, item.category_id, item.id));
      }
      return this.searchResult;
    };

    DatabaseApi.prototype.flush = function() {
      this.json_data = null;
      this.products = null;
      this.categories = null;
      this.buyerData = null;
      this.cart = null;
      return this.searchResult = null;
    };

    return DatabaseApi;

  })();

}).call(this);
